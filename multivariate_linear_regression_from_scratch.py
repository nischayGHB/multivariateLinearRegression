# -*- coding: utf-8 -*-
"""multivariate_linear_regression_from_scratch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oSfthr1zg4BxOFgkoE2gkWGes-w4fqgN
"""

#multivariate gradient descent from scratch 
import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt

!pip install xlrd==1.2.0

# dataset can be found here -> https://data.world/cesarpolo/consumer-loyalty-in-retail/workspace/file?filename=Loyalty.xls
data = pd.read_excel('Loyalty.xls','Sheet2')
data.head()

#scale the data
data = (data-data.mean())/data.std()

#train test data split 
x_train_data = x_train_data_copy = data.iloc[:1200,2:]
y_train_data = y_train_data_copy = data.iloc[:1200,1:2]
print(y_train_data.shape)
print(x_train_data.shape)
x_test_data  = x_test_data_copy  = data.iloc[1200:,2:]
y_test_data  = y_test_data_copy  = data.iloc[1200:,1:2]

#process the data 
_train_ones  = np.ones([x_train_data.shape[0],1])
x_train_data = np.array(x_train_data)
x_train_data = np.concatenate((_train_ones,x_train_data),axis=1)
y_train_data = np.array(y_train_data)

_test_ones   = np.ones([x_test_data.shape[0],1]) 
x_test_data  = np.array(x_test_data)
x_test_data  = np.concatenate((_test_ones,x_test_data),axis=1)

#initializer 
_thetas = np.zeros([1,x_train_data.shape[1]]) 
_alpha  = 0.01
_epochs = 10000

# train the model 
class LinearRegression:
      def __init__(self):
          self.alpha_  = 0.01
          self.epochs_ = 10000
      def fit(self,X,y):
          self.thetas_ = np.zeros([1,X.shape[1]])
          for i in range(self.epochs_):
                y_Error = (X@self.thetas_.T - y)
                self.thetas_ = self.thetas_ - (self.alpha_/X.shape[0])*np.sum(y_Error*X,axis=0)
          return self.thetas_
      def predict(self,X):
          return X@self.thetas_.T
      def tuneHyperParam(self): 
          try:
              self.alpha_  = float(input())
              self.epochs_ = int(input())
          except Exception as error: print(error)

# prediction 
_linear_model = LinearRegression()
_linear_model.fit(x_train_data,y_train_data)
y_predict = _linear_model.predict(x_test_data)

plt.scatter(x_test_data_copy.iloc[:,0],y_test_data,color='green')
plt.scatter(x_test_data_copy.iloc[:,0:1],y_predict,color='orange')
plt.xlabel('x_axis')
plt.ylabel('y_axis')
plt.legend(['actual_data','predicted_data'])
plt.title('multivariate gradient descent')
plt.show()

# evaluate the model 
y_mean = np.array([y_test_data.mean()]*y_test_data.shape[0])
r_square = np.sum(np.square(y_predict-y_mean)) / np.sum(np.square(y_test_data-y_mean))
print(r_square)